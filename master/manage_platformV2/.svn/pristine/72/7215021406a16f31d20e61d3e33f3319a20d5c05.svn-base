package com.jy.service.impl.system.org;

import com.jy.entity.system.account.Account;
import com.jy.entity.system.org.AccountPosition;
import com.jy.entity.system.org.Org;
import com.jy.entity.system.org.PosOrg;
import com.jy.entity.system.org.Position;
import com.jy.entity.utils.ZNodes;
import com.jy.mybatis.Page;
import com.jy.repository.system.org.OrgDao;
import com.jy.repository.system.org.PositionDao;
import com.jy.service.impl.base.BaseServiceImp;
import com.jy.service.system.org.PositionService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service("PositionService")
public class PositionServiceImp extends BaseServiceImp<Position> implements PositionService{

	@Autowired
	private PositionDao positionDao;

	@Autowired
	private OrgDao orgDao;

	@Override
	public List<ZNodes> getOrgAndPositionTree() {
		return positionDao.getOrgAndPositionTree();
	}

	@Override
	public List<ZNodes> getOrgTrees(String userId) {
		return positionDao.getOrgTrees(userId);
	}

	@Override
	public List<ZNodes> getPreOrgTree() {
		return positionDao.getPreOrgTree();
	}

	@Override
	public void saveAccountPosition(String posId,String ids) {
		if(StringUtils.isNotBlank(ids)){
			String[] chk =ids.split(",");
			List<AccountPosition> aps=new ArrayList<AccountPosition>();
			for(String id:chk){
				AccountPosition ap=new AccountPosition(id,posId);
				aps.add(ap);
			}
			positionDao.insertAccountPosition(aps);
		}
	}

	@Override
	public void deleteAccPosByAccId(String accountId) {
		if(StringUtils.isNotBlank(accountId)){
			positionDao.deleteAccPosByAccId(accountId);
		}
	}

	@Override
	public Page<Account> findArrangeAccByPage(Position o,Page<Account> page) {
		page.setResults(positionDao.findArrangeAccByPage(o,page));
		return page;
	}

	@Override
	public Page<Account> findPosByPage(Position o, Page<Account> page) {
		page.setResults(positionDao.findPosByPage(o,page));
		return page;
	}

	@Override@Transactional
	public void deletePos(Position o) {
		positionDao.delete(o);
		positionDao.deleteAccPosByPosId(o.getId());
	}

	@Override
	public Page<Position> findAllPosByPage(Position o, Page<Position> page) {
		String orgId=o.getOrgId();
		StringBuffer orgIds=new StringBuffer();
		List<Org> orgs=orgDao.findAllOrg(orgId);
		// 设置父和子组织id
		orgIds.append("'"+orgId+"'"+",");
		dealOrg(orgs,orgIds);
		orgIds.deleteCharAt(orgIds.length()-1);
		o.setAllOrgIds(orgIds.toString());
		List<Position> poss=positionDao.findAllPosByPage(o, page);
		page.setResults(poss);
		return page;
	}

	private void dealOrg(List<Org> orgChilds,StringBuffer orgIds){
		// 递归处理所有机构
		for(Org orgChild:orgChilds){
			List<Org> orgs=orgChild.getOrgs();
			for(Org o:orgs){orgIds.append("'"+o.getId()+"'"+",");}
			// 递归
			dealOrg(orgs,orgIds);
		}
	}

	@Override
	public List<ZNodes> findPosLevel(String userId) {
		List<ZNodes> list = positionDao.findPosLevel(userId);
		return list;
	}

	@Override
	public void savePosOrg(String posId, String orgs) {
		if(posId!=null&&posId!=""){
			positionDao.deletePos_Org(posId);
		}
		String[] orgIds=orgs.split(",");
		List<PosOrg> list = new ArrayList();
		for (int i = 0; i < orgIds.length; i++)
		{
			PosOrg posOrg = new PosOrg();
			posOrg.setPosId(posId);
			posOrg.setOrgId(orgIds[i]);
			list.add(posOrg);
		}
		positionDao.insertPos_Org(list);
	}

	@Override
	public List<Org> findBasePosition(String userId) {
		return positionDao.findBasePosition(userId);
	}

	@Override
	public List<Org> findUserID(Map o) {
		return positionDao.findUserID(o);
	}

	@Override
	public List<Org> findDataAuthority(String userId) {
		Map maps = new HashMap();
		List list = new ArrayList();
		maps.put("userId",userId);
		List<Org> a = findBasePosition(userId);
		List<Org> b = findUserLevel(userId);
		for (int i = 0; i < b.size(); i++) {
			for (int j = 0; j < a.size(); j++) {
				if (b.get(i).getOrgId().equals(a.get(j).getOrgId())){
					if(Integer.parseInt(b.get(i).getPosLevel())>=Integer.parseInt(a.get(j).getPosLevel())){
						list.add(a.get(j).getId());
					}
				}
			}
		}
		if (list.size()==0){
			list.add("0");
		}
		maps.put("userIds",list);
		List<Org> c = findUserID(maps);
		Org org = new Org();
		org.setAccountId(userId);
		c.add(org);


		for  ( int  i  =   0 ; i  <  c.size()  -   1 ; i ++ )   {
			for  ( int  j  =  c.size()  -   1 ; j  >  i; j -- )   {
				if  (c.get(j).getAccountId().equals(c.get(i).getAccountId()))   {
					c.remove(j);
				}
			}
		}
		return c;
	}

	@Override
	public List<Org> findUserLevel(String userId) {
		return positionDao.findUserLevel(userId);
	}

	@Override
	public List<ZNodes> getOrgTreesByPos(String id) {
		return positionDao.getOrgTreesByPos(id);
	}
}
