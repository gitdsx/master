package com.jy.test;

import com.alibaba.fastjson.JSONObject;
import com.jy.from.system.request.RequestPageInfoForm;
import com.jy.from.system.request.RequestParamInfoForm;
import com.jy.from.system.request.UserInfoForm;
import com.jy.process.system.request.UserBalanceRequestProcess;
import com.jy.process.system.request.UserInfoRequestProcess;
import com.jy.process.system.request.UserTransDetailRequestProcess;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Calendar;
import java.util.List;

/**
 * Created by lijunke on 2017/4/24.
 */
public class UserInfoRequestProcessImplTester extends BaseJunit4Test {

    @Autowired
    public UserInfoRequestProcess userInfoRequestProcess;

    @Autowired
    public UserBalanceRequestProcess userBalanceRequestProcess;

    @Autowired
    public UserTransDetailRequestProcess userTrans;

    @Test
    public void testSynchronizationUserData() {

        RequestParamInfoForm req = new RequestParamInfoForm();
        req.setPage("true");
        req.setQueryAll("true");
        //req.setCurrentPage(5);
        //req.setQueryTime("20170325");
        req.setPageSize(5000);
        try {
            userInfoRequestProcess.synchronizationUserData(req);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testSynchronizationUserData2() {

        RequestParamInfoForm req = new RequestParamInfoForm();
        req.setPage("true");
        req.setQueryAll("true");
        req.setCurrentPage(4);
        //req.setQueryTime("20170325");
        req.setPageSize(5000);
        try {
            userInfoRequestProcess.synchronizationUserData2(req);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testSynchronizationUserData3() {

        String data = null;
        String datas[] = new String[9];
        RequestParamInfoForm req = new RequestParamInfoForm();
        req.setPage("true");
        req.setQueryAll("true");
        req.setPageSize(5000);
        try {
            for (int i = 1; i <= 9; i++) {
                req.setCurrentPage(i);
                data = userInfoRequestProcess.synchronizationUserData3(req);
                datas[i] = data;
            }
            for (int j = 1; j <= datas.length; j++) {
                RequestPageInfoForm requestPageInfoForm = JSONObject.parseObject(datas[j], RequestPageInfoForm.class);
                List<UserInfoForm> userList = JSONObject.parseArray(requestPageInfoForm.getList().toString(), UserInfoForm.class);
                userInfoRequestProcess.transforPojoSave(userList);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testUserBalance() {

        RequestParamInfoForm req = new RequestParamInfoForm();
        req.setPage("true");
        req.setQueryAll("false");
        req.setCurrentPage(1);
        req.setQueryTime("20170417");
        req.setPageSize(5000);
        try {
            userBalanceRequestProcess.synchronizationUserBalanceData(req);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    @Test
    public void testUserBalanceAll() {

        RequestParamInfoForm req = new RequestParamInfoForm();
        req.setPage("true");
        req.setQueryAll("true");
        req.setCurrentPage(1);
        req.setQueryTime("20170401");
        req.setPageSize(5000);
        try {
            Calendar calendar = Calendar.getInstance();
            int month = calendar.get(Calendar.MONTH) + 1;
            for (int i = 4; i <= month; i++) {
                calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR));
                calendar.set(Calendar.MONTH, i - 1);
                int days = calendar.getActualMaximum(Calendar.DATE);
                if (i == month) {
                    days = calendar.get(Calendar.DATE);
                    break;
                }
                for (int j = 27; j <= days; j++) {
                    StringBuffer stringBuffer = new StringBuffer();
                    stringBuffer.append(2017).append(i < 10 ? "0" + i + "" : i).append(j < 10 ? "0" + j + "" : j);
                    req.setQueryTime(stringBuffer.toString());
                    userBalanceRequestProcess.synchronizationUserBalanceData(req);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    @Test
    public void testUserTrans() {

        RequestParamInfoForm req = new RequestParamInfoForm();
        req.setPage("true");
        req.setQueryAll("true");
        req.setCurrentPage(1);
        req.setQueryTime("20170407");
        req.setPageSize(5000);
        try {
            userTrans.synchronizationUserTransData(req);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
