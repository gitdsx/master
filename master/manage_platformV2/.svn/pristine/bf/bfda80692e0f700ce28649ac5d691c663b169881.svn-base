package com.jy.service.impl.system.org;

import com.jy.entity.system.org.Org;
import com.jy.entity.system.org.Role;
import com.jy.entity.system.org.RoleOrg;
import com.jy.entity.system.resources.RoleResources;
import com.jy.entity.utils.ZNodes;
import com.jy.mybatis.Page;
import com.jy.repository.system.org.OrgDao;
import com.jy.repository.system.org.RoleDao;
import com.jy.service.impl.base.BaseServiceImp;
import com.jy.service.system.org.RoleService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

@Service("RoleService")
public class RoleServiceImp extends BaseServiceImp<Role> implements RoleService
{

    @Autowired
    private RoleDao roleDao;

    @Autowired
    private OrgDao orgDao;

    @Override
    public List<ZNodes> listAuthorized(String roleId, String layer)
    {
        return roleDao.listAuthorized(roleId, layer);
    }

    @Override
    @Transactional
    public void saveAuthorized(String roleId, String aus, String layer)
    {
        List<RoleResources> roleAuth = new ArrayList<RoleResources>();
        String[] auss = aus.split(",");
        for (String s : auss)
        {
            if (StringUtils.isNotBlank(s))
                roleAuth.add(new RoleResources(roleId, s));
        }
        roleDao.delAuthorizedByRoleIdAndLayer(roleId, layer);
        if (roleAuth.size() > 0) roleDao.insertAuthorizedByRoleId(roleAuth);
    }

    @Override
    @Transactional
    public void delete(Role o)
    {
        //进行事务删除，删除角色还删除角色资源关系表
        roleDao.delete(o);
        roleDao.delAuthorizedByRoleId(o.getId());
    }

    @Override
    @Transactional
    public void deleteBatch(List<Role> os)
    {
        //进行事务删除，删除角色还删除角色资源关系表
        roleDao.deleteBatch(os);
        roleDao.deleteBatchAuthorizedByRoleId(os);
    }

    @Override
    public Page<Role> findAllRoleByPage(Role o, Page<Role> page)
    {
        String orgId = o.getOrgId();
        StringBuffer orgIds = new StringBuffer();
        List<Org> orgs = orgDao.findAllOrg(orgId);
        //设置父和子组织id
        orgIds.append("'" + orgId + "'" + ",");
        dealOrg(orgs, orgIds);
        orgIds.deleteCharAt(orgIds.length() - 1);
        o.setAllOrgIds(orgIds.toString());

        List<Role> roles = roleDao.findAllRoleByPage(o, page);
        page.setResults(roles);
        return page;
    }

    private void dealOrg(List<Org> orgChilds, StringBuffer orgIds)
    {
        //递归处理所有机构
        for (Org orgChild : orgChilds)
        {
            List<Org> orgs = orgChild.getOrgs();
            for (Org o : orgs)
            {
                orgIds.append("'" + o.getId() + "'" + ",");
            }
            //递归
            dealOrg(orgs, orgIds);
        }
    }

    @Override
    public List<ZNodes> getOrgTreesByRole(String id)
    {
        return roleDao.getOrgTreesByRole(id);
    }

    @Override
    public void deleteRoleOrg(String id)
    {
        roleDao.deleteRole_Org(id);
    }

    @Override
    public void insertRoleOrg(String roleId, String orgId) {
        String[] orgIds = orgId.split(",");
        List<RoleOrg> list = new ArrayList();
        for (int i = 0; i < orgIds.length; i++)
        {
            /*Map<String, Object> map=new HashMap<String, Object>();
            map.put("roleId", roleId);
            map.put("orgId", orgIds[i]);*/
            RoleOrg roleOrg = new RoleOrg();
            roleOrg.setRoleId(roleId);
            roleOrg.setOrgId(orgIds[i]);
            list.add(roleOrg);
        }
        roleDao.savePos_Org(list);

    }
}
